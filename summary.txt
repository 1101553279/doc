
看书流程：
	先见森林	->		后见树木
	一定是先整体后部分
	
先了解整体框架什么意思：
	这本书讲解关于什么，应用场景， 此部分在应用中属于哪个模块，
	这个模块完成了哪些任务。 提供的什么接口
	为了完成整体， 此模块完成了哪些功能
	此模块中， 涉及到哪些子模块。 
	这些子模块完成哪些任务，这些子模块起什么作用。
	子模块之间如何进行交互。子模块提供的接口是什么，为了完成子模块的功能，使用了哪些技能
	

再追求各章节完成什么任务：对于章节，肯定也是先整体后部分
	这个章节讲解的哪个模块， 这个模块之间结构是什么样子的， 框架是什么
	
	
	
	
	
	整体框架先了解， 应用场景， 作用，包括哪几部分， 之间如何交互。
	
	
	实现什么功能， 接口有哪些， 内部交互过程
	
	
	
	每个部分是如何实现的， 每个函数怎么实现的， 解决什么问题， 存在的意义。
	
总结：
	总结之前框架中提到的功能有没有完成
	


	
对细节的考虑， 往往能调出更多的东西。
思考为什么， 有什么合理之处。

不求速度。不能很好的把一本书理解。 等于白看， 不断在浪费时间中度过。欲速则不达


需求开发流程

需求文档
	应用场景， 整体框架， 之间交互
	需求细化，考虑所有正常情况， 异常情况

设计文档

代码开发

测试文档

了解一个模块：
	一定是	先了解需求(应用场景，此模块所起作用，细化需求部分)
	再看	设计思路， 肯定也是先框架， 再模块， 再细节。 对照需求文档， 设计有无不合理
	对照需求，测试是否ok
	

对于了解一类事物的流程：
	森林		->			树木		这是一个递归过程，也就是对于树木的了解， 也是先 框架 再 模块
	框架		->			模块
	整体		->			部分

	森林/


对于需要实践的流程:
	思想	驱动	行动	思考到某些东西，采取行动( 而不是行动之后才去思考，这跟行动产生思考是两码事情， 行动产生思考是个总结教训的过程。 为的是下次不再范错误)， 而不是行动 驱动思考(行动到一半才思考怎么做)
	
	思考	驱动	实践	所有的东西都思考清楚了 再去实践。一定要思考到所有的东西， 细节分解， 再去实践， 了解整个框架， 整个流程， 整个事物的特性， 再去行动， 实践
	
	实践	验证	思考的东西	实践过程中会产生反思， 需要增加思考的东西， 验证自己之前思考的东西对不对。 这是一个验证过程。增加理解的过程。
	
	熟悉之后		操作	熟悉之后可以对所面对的事物， 这是思考的产物。实践的产物。 操作不会有问题， 要做到熟悉， 要多实践。熟能生巧
	
	理解之后		测试	
	
	以上所有总结就是，	三思后行， 没有思想的行动，不思考的实践是盲目， 不熟悉就去操作， 不理解就去测试等于浪费实践，对成长没有意义



以上就是两条铁律：
	先整体	再部分
	先思考	再实践

	整体是什么:
		整体是什么应用场景， 需求是什么，作用是什么，完成什功能。 用到哪些手段， 分为哪几个模块， 每个模块完成什么任务， 之间有什么联系， 几个模块如何组合完成一个项功能的。
		
	
	部分是什么：
		
	思考是什么:
		触发时， 会遇到什么问题，哪几种情况， 每种情况怎么处理。 
		每种情况包括这情况遇到，需要怎么定义。处理方式是什么， 怎么解决是合适的。
		处理过程中再遇到处理问题， 该怎么办。
		正常处理流程是什么，需要完成什么任务。执行哪些操作。应该怎么处理。
		（需求文档编写，代码设计的时候，很有用哦， 这就是逻辑思维）
		
	
	实践是什么:
	
	
	所有的行动和实践， 应该只是自己思考的衍生， 是自己思想的证明。 是自己思考的确定过程。
	所有的面对的东西，都了然于胸时， 实践只是手到擒来， 探囊取物的过程而已。
	固有思想 驱使 行动， 而不是 行动 驱使 固有思想， 行动只会驱动新思想的产生。	
	
	自己要干什么， 现在在干什么， 现在在干的是不是自己想要干的。
	
不管是自己写代码， 还是看别人代码
不管是学习某样东西， 还是了解某样东西，
都是这个理


coding 流程：
	1>.先浏览需求框架
	2>.了解基本功能
	3>.熟悉通信方式/通信协议/通信过程
	4>.初步分析软件信息（status、trigger source）
		a>. 状态迁移图		（分析status和triggers）
		b>. 功能模块图		（分析需要哪几个模块包括一个main control模块）
		c>. 功能流程分类图	（按需求功能表示出各模块之间的交互）
		d>. 组合系统图		（将所有功能流程图合并）
	5>.阅读原理图
	6>.详细设计软件
	7>.coding
	8>.test


coding 流程：
	1>.先浏览需求框架
	2>.了解基本功能
	3>.熟悉通信方式/通信协议/通信过程
	4>.阅读原理图
	5>.初步分析软件信息（status、trigger source）
		a>. 状态迁移图		（分析status和triggers）
		b>. 功能模块图		（分析需要哪几个模块包括一个main control模块）
		c>. 功能流程分类图	（按需求功能表示出各模块之间的交互）
		d>. 组合系统图		（将所有功能流程图合并）
	6>.详细设计软件
	7>.coding
	8>.test

	
	 ---------------
	|	app	|				
	 ---------------
     ---------------------------
    |		hardware	|
     ---------------------------			
  --------------------------------------
 |		requirment		|
  --------------------------------------



	 ---------------
	|	app	|				APP
	 ---------------
     ---------------------------
    |		driver		|
     ---------------------------			OS
  --------------------------------------
 |		kernel			|
  --------------------------------------

	 ---------------
	|     peripheral |				
	 ---------------
     ---------------------------
    |		driver		|
     ---------------------------			
  --------------------------------------
 |		cpu			|
  --------------------------------------

 -----------------------------------------------
|		analy & digit			|
 -----------------------------------------------
 -----------------------------------------------
|		electronic basic		|
 -----------------------------------------------

1>. 站在发明者的角度学习
2>. 站在用户的角度思考
3>. 站在设计者的角度code
............................


program notics:
	1.处理操作统一性, 在同一处处理
	2.输入消息不处理尽早屏蔽
	3.思考全面性，一个设备扮演多个角色时，需要同时考虑处理
	4.功能需求实现执行时不依赖隐形环境，需要显式处理

